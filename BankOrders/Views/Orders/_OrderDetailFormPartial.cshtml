@model OrderDetailFormModel

<h4>Add a detail</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-row">
                <div class="form-group col-md-2">
                    <label asp-for="Branch" class="control-label"></label>
                    <input asp-for="Branch" class="form-control" />
                    <span asp-validation-for="Branch" class="text-danger"></span>
                    <br />
                    @if (Model.OrderSystem == OrderSystem.Internal)
                    {
                        <label asp-for="CostCenter" class="control-label">Cost Center</label>
                        <input asp-for="CostCenter" class="form-control" />
                        <span asp-validation-for="CostCenter" class="text-danger"></span>
                    }
                    else
                    {
                        <label asp-for="Project" class="control-label"></label>
                        <input asp-for="Project" class="form-control" />
                        <span asp-validation-for="Project" class="text-danger"></span>
                    }
                </div>
                <div class="form-group col-md-3">
                    <label asp-for="Account" class="control-label"></label>
                    <input asp-for="Account" class="form-control" />
                    <span asp-validation-for="Account" class="text-danger"></span>
                    <br />
                    <label asp-for="AccountType" class="control-label"></label>
                    <input asp-for="AccountType" class="form-control" />
                    <span asp-validation-for="AccountType" class="text-danger"></span>
                </div>
                <div class="form-group col-md-1">
                    <label asp-for="Currency" class="control-label"></label>
                    <select asp-for="Currency" id="currency" class="form-control" onchange="changeSumBGN()">
                        <option>BGN</option>
                        <option>USD</option>
                        <option>EUR</option>
                        <option>GBP</option>
                    </select>
                    <span asp-validation-for="Currency" class="text-danger"></span>
                    <br />
                    <label class="control-label">Rate</label>
                    <input id="exchangeRate" class="form-control" value="1" readonly />
                </div>
                <div class="form-group col-md-2">
                    <label asp-for="Sum" class="control-label"></label>
                    <input asp-for="Sum" id="sum" class="form-control" onchange="changeSumBGN()" />
                    <span asp-validation-for="Sum" class="text-danger"></span>
                    <br />
                    <label asp-for="SumBGN" class="control-label"></label>
                    <input asp-for="SumBGN" id="sumBGN" class="form-control" readonly/>
                    <span asp-validation-for="SumBGN" class="text-danger"></span>
                </div>
                <div class="form-group col-md-3">
                    <label asp-for="Reason" class="control-label"></label>
                    <textarea asp-for="Reason" class="form-control" rows="4"></textarea>
                    <span asp-validation-for="Reason" class="text-danger"></span>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">@(Model == null ? "Add Detail" : "Save Detail")</button>
        </form>
    </div>
</div>

<script>
    function changeSumBGN() {
        var sum = document.getElementById("sum");
        var sumBGN = document.getElementById("sumBGN");
        var curr = document.getElementById("currency");
        var exchangeRate = document.getElementById("exchangeRate");
        var rate;

        switch (curr.value) {
            case 'BGN':
                rate = @Model.ExchangeRates.First(x => x.Currency == Currency.BGN).Rate;
                break;
            case 'GBP':
                rate = @Model.ExchangeRates.First(x => x.Currency == Currency.GBP).Rate;
                break;
            case 'EUR':
                rate = @Model.ExchangeRates.First(x => x.Currency == Currency.EUR).Rate;
                break;
            case 'USD':
                rate = @Model.ExchangeRates.First(x => x.Currency == Currency.USD).Rate;
                break;
        }

        exchangeRate.value = rate;

        sumBGN.value = sum.value * exchangeRate.value;
    }
</script>